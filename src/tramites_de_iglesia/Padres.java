package tramites_de_iglesia;

import java.awt.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class Padres extends javax.swing.JFrame {

    //Imagenes
    ImageIcon icon_Padres = new ImageIcon(ClassLoader.getSystemResource("imagenes/Padres.png"));
    ImageIcon icon_Info = new ImageIcon(ClassLoader.getSystemResource("imagenes/Info.png"));
    
    //Objetos
    Configuraciones config = new Configuraciones();
    
    String datos[] = config.leerArchivo(); //Leer los datos del archivo
    
    ConexionDB DB =  new ConexionDB();
    java.sql.Connection conexion = DB.conectarDB(DB.getDatabase(), datos[0], datos[1], false);
    
    DefaultTableModel modelo;
    /**
     * Creates new form Padres
     */
    public Padres() {
        initComponents();
        this.setLocationRelativeTo(null); //Centrar ventana
        modelo = new DefaultTableModel();
        modelo.addColumn("Id");
        modelo.addColumn("Nombre");
        modelo.addColumn("Ocupación");
        modelo.addColumn("Id perfil parroquial");
        modelo.addColumn("Fecha de nacimiento");
        modelo.addColumn("Celular");
        this.table_padres.setModel(modelo);
        try {
            consultarTabla();
        } catch (SQLException ex) {
            Configuraciones.setWarningMsg("" + ex.getMessage());
        }
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
        getImage(ClassLoader.getSystemResource("imagenes/Padres - white.png"));
        return retValue;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        title_window = new javax.swing.JLabel();
        icon_window = new javax.swing.JLabel();
        icon_info_window = new javax.swing.JLabel();
        id_padre_text = new javax.swing.JLabel();
        id_ocupacion_text = new javax.swing.JLabel();
        perfil_parroquial_text = new javax.swing.JLabel();
        nombre_text = new javax.swing.JLabel();
        fecha_nacimiento_text = new javax.swing.JLabel();
        celular_text = new javax.swing.JLabel();
        editar_padre_text = new javax.swing.JLabel();
        borrar_padre_text = new javax.swing.JLabel();
        registros_db_text = new javax.swing.JLabel();
        id_padre_input = new javax.swing.JTextField();
        id_ocupacion_input = new javax.swing.JTextField();
        perfil_parroquial_input = new javax.swing.JTextField();
        nombre_input = new javax.swing.JTextField();
        fecha_nacimiento_input = new javax.swing.JTextField();
        celular_input = new javax.swing.JTextField();
        id_padre_separator = new javax.swing.JSeparator();
        id_ocupacion_separator = new javax.swing.JSeparator();
        perfil_parroquial_separator = new javax.swing.JSeparator();
        nombre_separator = new javax.swing.JSeparator();
        fecha_nacimiento_separator = new javax.swing.JSeparator();
        celular_separator = new javax.swing.JSeparator();
        editar_padre_input = new javax.swing.JTextField();
        borrar_padre_input = new javax.swing.JTextField();
        editar_padre_separator = new javax.swing.JSeparator();
        borrar_padre_separator = new javax.swing.JSeparator();
        btn_registrar_actualizar = new javax.swing.JButton();
        btn_seleccionar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        jScroll_table = new javax.swing.JScrollPane();
        table_padres = new javax.swing.JTable();
        btn_actualizar_tabla = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Padres");
        setIconImage(getIconImage());
        setResizable(false);

        background.setBackground(new java.awt.Color(237, 237, 237));
        background.setMinimumSize(new java.awt.Dimension(928, 600));
        background.setPreferredSize(new java.awt.Dimension(985, 650));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title_window.setFont(new java.awt.Font("Roboto", 1, 40)); // NOI18N
        title_window.setForeground(new java.awt.Color(0, 0, 0));
        title_window.setText("Padres");
        background.add(title_window, new org.netbeans.lib.awtextra.AbsoluteConstraints(442, 43, -1, -1));

        icon_window.setForeground(new java.awt.Color(0, 0, 0));
        icon_window.setIcon(icon_Padres);
        background.add(icon_window, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 43, 40, 40));

        icon_info_window.setForeground(new java.awt.Color(0, 0, 0));
        icon_info_window.setIcon(icon_Info);
        background.add(icon_info_window, new org.netbeans.lib.awtextra.AbsoluteConstraints(573, 60, 16, 16));

        id_padre_text.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        id_padre_text.setForeground(new java.awt.Color(0, 0, 0));
        id_padre_text.setText("Id padre");
        background.add(id_padre_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 151, -1, -1));

        id_ocupacion_text.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        id_ocupacion_text.setForeground(new java.awt.Color(0, 0, 0));
        id_ocupacion_text.setText("Id ocupación");
        background.add(id_ocupacion_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 214, -1, -1));

        perfil_parroquial_text.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        perfil_parroquial_text.setForeground(new java.awt.Color(0, 0, 0));
        perfil_parroquial_text.setText("Id perfil parroquial");
        background.add(perfil_parroquial_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 277, -1, -1));

        nombre_text.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        nombre_text.setForeground(new java.awt.Color(0, 0, 0));
        nombre_text.setText("Nombre");
        background.add(nombre_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 340, -1, -1));

        fecha_nacimiento_text.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        fecha_nacimiento_text.setForeground(new java.awt.Color(0, 0, 0));
        fecha_nacimiento_text.setText("Fecha de naciminento");
        background.add(fecha_nacimiento_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 403, -1, -1));

        celular_text.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        celular_text.setForeground(new java.awt.Color(0, 0, 0));
        celular_text.setText("Celular");
        background.add(celular_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 466, -1, -1));

        editar_padre_text.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        editar_padre_text.setForeground(new java.awt.Color(0, 0, 0));
        editar_padre_text.setText("Editar padre");
        background.add(editar_padre_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 147, -1, -1));

        borrar_padre_text.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        borrar_padre_text.setForeground(new java.awt.Color(0, 0, 0));
        borrar_padre_text.setText("Borrar padre");
        background.add(borrar_padre_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 147, -1, -1));

        registros_db_text.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        registros_db_text.setForeground(new java.awt.Color(0, 0, 0));
        registros_db_text.setText("Registros de la Base de Datos");
        background.add(registros_db_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 237, -1, -1));

        id_padre_input.setBackground(new java.awt.Color(255, 255, 255));
        id_padre_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        id_padre_input.setForeground(new java.awt.Color(153, 51, 255));
        id_padre_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(id_padre_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 170, 266, 31));

        id_ocupacion_input.setBackground(new java.awt.Color(255, 255, 255));
        id_ocupacion_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        id_ocupacion_input.setForeground(new java.awt.Color(153, 51, 255));
        id_ocupacion_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(id_ocupacion_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 233, 266, 31));

        perfil_parroquial_input.setBackground(new java.awt.Color(255, 255, 255));
        perfil_parroquial_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        perfil_parroquial_input.setForeground(new java.awt.Color(153, 51, 255));
        perfil_parroquial_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(perfil_parroquial_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 296, 266, 31));

        nombre_input.setBackground(new java.awt.Color(255, 255, 255));
        nombre_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        nombre_input.setForeground(new java.awt.Color(153, 51, 255));
        nombre_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(nombre_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 359, 266, 31));

        fecha_nacimiento_input.setBackground(new java.awt.Color(255, 255, 255));
        fecha_nacimiento_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        fecha_nacimiento_input.setForeground(new java.awt.Color(153, 51, 255));
        fecha_nacimiento_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(fecha_nacimiento_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 422, 266, 31));

        celular_input.setBackground(new java.awt.Color(255, 255, 255));
        celular_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        celular_input.setForeground(new java.awt.Color(153, 51, 255));
        celular_input.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        celular_input.setToolTipText("");
        celular_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(celular_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 485, 266, 31));

        id_padre_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(id_padre_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 201, 266, -1));

        id_ocupacion_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(id_ocupacion_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 264, 266, -1));

        perfil_parroquial_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(perfil_parroquial_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 327, 266, -1));

        nombre_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(nombre_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 390, 266, -1));

        fecha_nacimiento_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(fecha_nacimiento_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 453, 266, -1));

        celular_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(celular_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 516, 266, -1));

        editar_padre_input.setBackground(new java.awt.Color(255, 255, 255));
        editar_padre_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        editar_padre_input.setForeground(new java.awt.Color(153, 51, 255));
        editar_padre_input.setText("Digite el id");
        editar_padre_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(editar_padre_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 170, 130, 31));

        borrar_padre_input.setBackground(new java.awt.Color(255, 255, 255));
        borrar_padre_input.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        borrar_padre_input.setForeground(new java.awt.Color(153, 51, 255));
        borrar_padre_input.setText("Digite el id");
        borrar_padre_input.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        background.add(borrar_padre_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 170, 130, 31));

        editar_padre_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(editar_padre_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 201, 130, -1));

        borrar_padre_separator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        background.add(borrar_padre_separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 201, 130, -1));

        btn_registrar_actualizar.setBackground(new java.awt.Color(255, 192, 69));
        btn_registrar_actualizar.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btn_registrar_actualizar.setForeground(new java.awt.Color(0, 0, 0));
        btn_registrar_actualizar.setText("Registrar / Actualizar");
        btn_registrar_actualizar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(207, 117, 0), 2, true));
        btn_registrar_actualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_registrar_actualizar.setFocusable(false);
        btn_registrar_actualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_registrar_actualizarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_registrar_actualizarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_registrar_actualizarMouseExited(evt);
            }
        });
        background.add(btn_registrar_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 545, 266, 35));

        btn_seleccionar.setBackground(new java.awt.Color(10, 145, 171));
        btn_seleccionar.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btn_seleccionar.setForeground(new java.awt.Color(255, 255, 255));
        btn_seleccionar.setText("Seleccionar");
        btn_seleccionar.setToolTipText("");
        btn_seleccionar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 84, 113), 2, true));
        btn_seleccionar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_seleccionar.setFocusable(false);
        btn_seleccionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_seleccionarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_seleccionarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_seleccionarMouseExited(evt);
            }
        });
        background.add(btn_seleccionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 168, 130, 35));

        btn_eliminar.setBackground(new java.awt.Color(10, 145, 171));
        btn_eliminar.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setText("Eliminar");
        btn_eliminar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 84, 113), 2, true));
        btn_eliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_eliminar.setFocusable(false);
        btn_eliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_eliminarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_eliminarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_eliminarMouseExited(evt);
            }
        });
        background.add(btn_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(798, 168, 130, 35));

        table_padres.setBackground(new java.awt.Color(255, 255, 255));
        table_padres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Ocupación", "Id pefil parroquial", "Fecha de nacimiento", "Celular"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_padres.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table_padres.setRowHeight(29);
        jScroll_table.setViewportView(table_padres);

        background.add(jScroll_table, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 264, 573, 252));

        btn_actualizar_tabla.setBackground(new java.awt.Color(10, 145, 171));
        btn_actualizar_tabla.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btn_actualizar_tabla.setForeground(new java.awt.Color(255, 255, 255));
        btn_actualizar_tabla.setText("Actualizar tabla");
        btn_actualizar_tabla.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 84, 113), 2, true));
        btn_actualizar_tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_actualizar_tabla.setFocusable(false);
        btn_actualizar_tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_actualizar_tablaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_actualizar_tablaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_actualizar_tablaMouseExited(evt);
            }
        });
        background.add(btn_actualizar_tabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(509, 545, 266, 35));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_registrar_actualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_registrar_actualizarMouseClicked
        //Obtener los datos de los inputs
        String id_padre = id_padre_input.getText();
        String id_ocupacion = id_ocupacion_input.getText();
        String id_perfil_parroquial = perfil_parroquial_input.getText();
        String nombre = nombre_input.getText();
        String fecha_nacimiento = fecha_nacimiento_input.getText();
        String celular = celular_input.getText();
        
        //Buscar el id
        String idEncontrado = buscarId(id_padre);
        
        //Formatear datos
        if (id_padre.length() == 0 || nombre.length() == 0){
            config.setWarningMsg("Faltan por rellenar campos obligatorios!");
        } else {
            //Formatear los datos
            id_padre = formatearValor(id_padre);
            id_ocupacion = formatearValor(id_ocupacion);
            id_perfil_parroquial = formatearValor(id_perfil_parroquial);
            nombre = formatearValor(nombre);
            fecha_nacimiento = formatearValor(fecha_nacimiento);
            celular = formatearValor(celular);
            if (idEncontrado == "0"){ //El id no existe en la Base de Datos
                //Insertar los datos en la DB
                try {
                    String sql = "insert into padre values" +
                            "(" + id_padre + "," + id_ocupacion + "," + id_perfil_parroquial + "," + 
                            nombre + "," + fecha_nacimiento + "," + celular + ");";
                    java.sql.Statement statement = conexion.createStatement();
                    statement.executeUpdate(sql);
                } catch (SQLException ex) {
                    Configuraciones.setWarningMsg("" + ex.getMessage());
                }
            } else { //El id existe en la Base de Datos
                //Actualizamos el registro de la base de datos
                try {
                    String sql = "update padre set " +
                        "id_ocupacion = " + id_ocupacion + ", " + "id_perfil_parroquial = " + 
                        id_perfil_parroquial + ", nombre_padre = " + nombre + ", " +
                        "fecha_nacimiento = " + fecha_nacimiento + ", " + "celular_padre = " + celular + 
                        "where id_padre = " + id_padre + ";";
                    java.sql.Statement statement = conexion.createStatement();
                    statement.executeUpdate(sql);
                    JOptionPane.showMessageDialog(null, "Padre actualizado!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    Configuraciones.setWarningMsg("" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btn_registrar_actualizarMouseClicked

    private void btn_registrar_actualizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_registrar_actualizarMouseEntered
        btn_registrar_actualizar.setBackground(new Color(255,214,129));
    }//GEN-LAST:event_btn_registrar_actualizarMouseEntered

    private void btn_registrar_actualizarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_registrar_actualizarMouseExited
        btn_registrar_actualizar.setBackground(new Color(255,192,69));
    }//GEN-LAST:event_btn_registrar_actualizarMouseExited

    private void btn_seleccionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_seleccionarMouseClicked
        String id_padre_editar = editar_padre_input.getText();
        String idEncontrado = buscarId(id_padre_editar);
        if (idEncontrado.equals("Digite el id")){ //En caso de presionar el botón sin cambiar los datos del input
        } else {
            if(idEncontrado != "0"){
                try {
                    String sql = "select * from padre where id_padre = \'" + idEncontrado + "\';"; 
                    java.sql.Statement statement = conexion.createStatement();
                    ResultSet rs = statement.executeQuery(sql);

                    while (rs.next()){ //Extraemos el resultado de la consulta
                        id_padre_input.setText(rs.getString(1));
                        id_ocupacion_input.setText(rs.getString(2));
                        perfil_parroquial_input.setText(rs.getString(3));
                        nombre_input.setText(rs.getString(4));
                        fecha_nacimiento_input.setText(rs.getString(5));
                        celular_input.setText(rs.getString(6));
                    }
                } catch (SQLException ex) {
                    Configuraciones.setWarningMsg("" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btn_seleccionarMouseClicked

    private void btn_seleccionarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_seleccionarMouseEntered
        btn_seleccionar.setBackground(new Color(10,163,204));
    }//GEN-LAST:event_btn_seleccionarMouseEntered

    private void btn_seleccionarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_seleccionarMouseExited
        btn_seleccionar.setBackground(new Color(10,145,171));
    }//GEN-LAST:event_btn_seleccionarMouseExited

    private void btn_eliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminarMouseClicked
        String id_padre_eliminar = borrar_padre_input.getText();
        String idEncontrado = buscarId(id_padre_eliminar);
        if (idEncontrado.equals("Digite el id")){ //En caso de presionar el botón sin cambiar los datos del input
        } else {
            if(idEncontrado != "0"){
                try {
                    int resultado = JOptionPane.showConfirmDialog(null,
                            "¿Desea eliminar el padre con el Id: " + idEncontrado + "?", "Confirmar eliminación",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if(resultado == JOptionPane.YES_OPTION){
                        String sql = "delete from padre where id_padre = " + "\'" + idEncontrado + "\'";
                        java.sql.Statement statement = conexion.createStatement();
                        statement.executeUpdate(sql);
                        JOptionPane.showMessageDialog(null, "Padre eliminado!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Configuraciones.setWarningMsg("" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btn_eliminarMouseClicked

    private void btn_eliminarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminarMouseEntered
        btn_eliminar.setBackground(new Color(10,163,204));
    }//GEN-LAST:event_btn_eliminarMouseEntered

    private void btn_eliminarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminarMouseExited
        btn_eliminar.setBackground(new Color(10,145,171));
    }//GEN-LAST:event_btn_eliminarMouseExited

    private void btn_actualizar_tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_actualizar_tablaMouseClicked
        try {
            limpiarTabla(modelo);
            consultarTabla();
        } catch (SQLException ex) {
            Configuraciones.setWarningMsg("" + ex.getMessage());
        }
    }//GEN-LAST:event_btn_actualizar_tablaMouseClicked

    private void btn_actualizar_tablaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_actualizar_tablaMouseEntered
        btn_actualizar_tabla.setBackground(new Color(10,163,204));
    }//GEN-LAST:event_btn_actualizar_tablaMouseEntered

    private void btn_actualizar_tablaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_actualizar_tablaMouseExited
        btn_actualizar_tabla.setBackground(new Color(10,145,171));
    }//GEN-LAST:event_btn_actualizar_tablaMouseExited
    
    public String formatearValor(String dato){
        if(dato.length() > 0){
            dato = "\'" + dato + "\'";
        } else {
            dato = "null";
        }
        return dato;
    }
    
    public String buscarId(String id){
        if(id.length() > 0){
            try {
                String sql = "select count(id_padre) from padre where id_padre = \'" + id + "\';"; 
                java.sql.Statement statement = conexion.createStatement();
                ResultSet rs = statement.executeQuery(sql);
                
                int found = 0; //Almacena 1 si encentra el id y 0 en caso contrario.
                while (rs.next()){ //Extraemos el resultado de la consulta (en columnas)
                    found = rs.getInt(1); //Accedemos a la columna y asignamos el valor a una nueva variable
                }
                if(found >= 1){ //Verificamos el valor de la variable (1 o 0)
                    //JOptionPane.showMessageDialog(null, "Id encontrado!");
                } else {
                    id = "0";
                    JOptionPane.showMessageDialog(null, "Id no encontrado!");
                }
            } catch (SQLException ex) {
                Configuraciones.setWarningMsg("" + ex.getMessage());
            }
        } else {
            Configuraciones.setWarningMsg("No hay id para seleccionar!");
        }
        return id;
    }
    
    public void consultarTabla() throws SQLException{
        try {
            String sql = " select id_padre, nombre_padre, id_ocupacion, id_perfil_parroquial, " +
                         " fecha_nacimiento, celular_padre from padre order by id_padre; ";
            java.sql.Statement statement = conexion.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            String[] filas = new String[6];
            while(rs.next()){
                filas[0] = rs.getString(1);
                filas[1] = rs.getString(2);
                filas[2] = rs.getString(3);
                filas[3] = rs.getString(4);
                filas[4] = rs.getString(5);
                filas[5] = rs.getString(6);
                modelo.addRow(filas);
              }
        } catch (SQLException ex) {
            Configuraciones.setWarningMsg("" + ex.getMessage());
        }
    }
    
    public void limpiarTabla(final DefaultTableModel model) {
        for( int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Padres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Padres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Padres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Padres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Padres().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JTextField borrar_padre_input;
    private javax.swing.JSeparator borrar_padre_separator;
    private javax.swing.JLabel borrar_padre_text;
    private javax.swing.JButton btn_actualizar_tabla;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_registrar_actualizar;
    private javax.swing.JButton btn_seleccionar;
    private javax.swing.JTextField celular_input;
    private javax.swing.JSeparator celular_separator;
    private javax.swing.JLabel celular_text;
    private javax.swing.JTextField editar_padre_input;
    private javax.swing.JSeparator editar_padre_separator;
    private javax.swing.JLabel editar_padre_text;
    private javax.swing.JTextField fecha_nacimiento_input;
    private javax.swing.JSeparator fecha_nacimiento_separator;
    private javax.swing.JLabel fecha_nacimiento_text;
    private javax.swing.JLabel icon_info_window;
    private javax.swing.JLabel icon_window;
    private javax.swing.JTextField id_ocupacion_input;
    private javax.swing.JSeparator id_ocupacion_separator;
    private javax.swing.JLabel id_ocupacion_text;
    private javax.swing.JTextField id_padre_input;
    private javax.swing.JSeparator id_padre_separator;
    private javax.swing.JLabel id_padre_text;
    private javax.swing.JScrollPane jScroll_table;
    private javax.swing.JTextField nombre_input;
    private javax.swing.JSeparator nombre_separator;
    private javax.swing.JLabel nombre_text;
    private javax.swing.JTextField perfil_parroquial_input;
    private javax.swing.JSeparator perfil_parroquial_separator;
    private javax.swing.JLabel perfil_parroquial_text;
    private javax.swing.JLabel registros_db_text;
    private javax.swing.JTable table_padres;
    private javax.swing.JLabel title_window;
    // End of variables declaration//GEN-END:variables
}
